services:
  benchmark:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: fvdb-benchmark
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              device_ids: [ "0" ]
              capabilities: [ gpu ]
    environment:
      - CPM_SOURCE_CACHE=/workspace/.cache/CPM
      - NVIDIA_VISIBLE_DEVICES=0
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
      - TORCH_CUDA_ARCH_LIST=${TORCH_CUDA_ARCH_LIST:-}
      - CMAKE_BUILD_PARALLEL_LEVEL=${CMAKE_BUILD_PARALLEL_LEVEL:-18}
      - PYTHONWARNINGS=ignore:::PIL.Image # for DecompressionBombWarning
    volumes:
      - ${CPM_SOURCE_CACHE:?set CPM_SOURCE_CACHE on host}:/workspace/.cache/CPM
      - ../../../../data:/workspace/data
      - ../results:/workspace/results
      - ../../../../../:/workspace/openvdb
      - ..:/workspace/benchmark
    ports:
      - "8080:8080" # FVDB viewer
      - "8081:8081" # GSplat viewer
    working_dir: /workspace/benchmark
    stdin_open: true
    tty: true
    shm_size: 16gb
    ipc: host
    command:
      - bash
      - -lc
      - |
        set -e
        nvidia-smi --query-gpu=compute_cap --format=csv,noheader 2>/dev/null | awk NF | sort -u | sed 's/$$/+PTX/'
        archs=$(nvidia-smi --query-gpu=compute_cap --format=csv,noheader 2>/dev/null | awk NF | sort -u | sed 's/$$/+PTX/')
        [ -z "$$archs" ] && archs="8.6,8.9,10.0,12.0+PTX"
        echo "archs: $$archs"
        export TORCH_CUDA_ARCH_LIST="$$archs"
        export CUDAARCHS=$(echo "$$archs" | tr ';' '\n' | sed 's/+PTX//' | tr -d . | paste -sd',' -)
        git config --global --add safe.directory /workspace/openvdb/fvdb-core
        git config --global --add safe.directory /workspace/openvdb/fvdb-reality-capture
        echo 'Building fused-ssim...'
        pip install -v --no-build-isolation --no-cache-dir "fused-ssim @ git+https://github.com/rahul-goel/fused-ssim@328dc9836f513d00c4b5bc38fe30478b4435cbb5"
        echo 'fused-ssim build complete!'
        echo 'Building FVDB...'
        cd /workspace/openvdb/fvdb-core
        source /opt/conda/etc/profile.d/conda.sh
        conda activate benchmark
        echo 'Conda environment activated, starting build...'
        echo CPM_SOURCE_CACHE: $$CPM_SOURCE_CACHE
        echo TORCH_CUDA_ARCH_LIST: $$TORCH_CUDA_ARCH_LIST
        echo CUDAARCHS: $$CUDAARCHS
        ./build.sh install verbose
        echo 'FVDB build complete!'
        echo 'Building GSplat...'
        cd /workspace/gsplat
        pip install -v --no-build-isolation --no-cache-dir .
        echo 'GSplat build complete!'
        echo 'Building fvdb-reality-capture...'
        cd /workspace/openvdb/fvdb-reality-capture
        pip install -v .
        echo 'fvdb-reality-capture build complete!'
        tail -f /dev/null # keep container running
